package com.example.AI_Diary.service;

import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.AI_Diary.model.User;
import com.example.AI_Diary.repository.UserRepository;

@Service
public class UserService implements UserDetailsService {

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public User saveUser(User user) {
        return userRepository.save(user);
    }

    public Optional<User> findByUsernameOrEmail(String usernameOrEmail) {
        return userRepository.findByUsernameOrEmail(usernameOrEmail, usernameOrEmail);
    }

    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    public void sendEmail(String to, String subject, String text) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject(subject);
        message.setText(text);
        mailSender.send(message);
    }

    // 아이디 찾기 메서드
    public String findUsernameByEmail(String name, String email) {
        Optional<User> user = userRepository.findByUsernameOrEmail(name, email);
        return user.map(User::getUsername).orElse(null);
    }

 // 비밀번호 재설정 요청 메서드
    public void requestPasswordReset(String email) {
        User user = findByEmail(email).orElseThrow(() -> new RuntimeException("User not found"));
        String token = UUID.randomUUID().toString();
        // 저장된 토큰을 사용하여 비밀번호 재설정 링크 생성
        String resetLink = "http://localhost:3000/reset-password?token=" + token;

        // 사용자에게 이메일 전송
        sendEmail(user.getEmail(), "Password Reset Request",
                  "To reset your password, click the link below:\n" + resetLink);

        // 여기에서 token을 DB에 저장하는 로직 추가 (TokenRepository 등을 사용하여)
    }
    
    // 비밀번호 재설정 메서드
    public void resetPassword(String token, String newPassword) {
        // 토큰을 검증하고 사용자 정보를 가져오는 로직 추가
        User user = validatePasswordResetToken(token).orElseThrow(() -> new RuntimeException("Invalid token"));
        user.setPassword(passwordEncoder.encode(newPassword)); // 암호화 필요
        userRepository.save(user);
    }

    // 토큰 검증 메서드
    public Optional<User> validatePasswordResetToken(String token) {
        // 토큰 검증 로직 추가
        return Optional.empty(); // 예시로 Optional.empty() 반환
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found with username: " + username));
        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getUsername())
                .password(user.getPassword())
                .authorities("USER") // Modify authorities as needed
                .build();
    }
}
